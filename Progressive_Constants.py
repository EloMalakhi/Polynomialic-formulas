import sympy
# degree 2:     C1 = -2*s0, 
#               C0 = s0**2 - s1**2*r

# degree 3:     C2 = -3*s0, 
#               C1 = 3*s0**2 - 3*r*s1*s2, 
#               C0 = 3*r*s0*s1*s2 - r**2*s2**3 - r*s1**3 - s0**3

# degree 4:     C3 = -4*s0, 
#               C2 = -4*r*s1*s3 - 2*r*s2**2 + 6*s0**2, 
#               C1 = -4*r**2*s2*s3**2 + 8*r*s0*s1*s3 + 4*r*s0*s2**2 - 4*r*s1**2*s2 - 4*s0**3, 
#               C0 = -r**3*s3**4 + 4*r**2*s0*s2*s3**2 + 2*r**2*s1**2*s3**2 - 4*r**2*s1*s2**2*s3 + r**2*s2**4 - 4*r*s0**2*s1*s3 - 2*r*s0**2*s2**2 + 4*r*s0*s1**2*s2 - r*s1**4 + s0**4

# degree 5:     C4 = -5*s0
#               C3 = -5*r*s1*s4 -5*r*s2*s3 + 10*s0**2
#               C2 = -5*r**2*s2*s4**2 -5*r**2*s3**2*s4 + 15*r*s0*s1*s4 + 15*r*s0*s2*s3 -5*r*s1**2*s3 -5*r*s1*s2**2 -10*s0**3
#               C1 = -5*r**3*s3*s4**3 + 10*r**2*s0*s2*s4**2 + 10*r**2*s0*s3**2*s4 + 5*r**2*s1**2*s4**2 - 5*r**2*s1*s2*s3*s4 - 5*r**2*s1*s3**3 - 5*r**2*s2**3*s4 + 5*r**2*s2**2*s3**2 - 15*r*s0**2*s1*s4 - 15*r*s0**2*s2*s3 + 10*r*s0*s1**2*s3 + 10*r*s0*s1*s2**2 - 5*r*s1**3*s2 + 5*s0**4
#               C0 = -r**4*s4**5 + 5*r**3*s0*s3*s4**3 + 5*r**3*s1*s2*s4**3 - 5*r**3*s1*s3**2*s4**2 - 5*r**3*s2**2*s3*s4**2 + 5*r**3*s2*s3**3*s4 - r**3*s3**5 - 5*r**2*s0**2*s2*s4**2 - 5*r**2*s0**2*s3**2*s4 - 5*r**2*s0*s1**2*s4**2 + 5*r**2*s0*s1*s2*s3*s4 + 5*r**2*s0*s1*s3**3 + 5*r**2*s0*s2**3*s4 - 5*r**2*s0*s2**2*s3**2 + 5*r**2*s1**3*s3*s4 - 5*r**2*s1**2*s2**2*s4 - 5*r**2*s1**2*s2*s3**2 + 5*r**2*s1*s2**3*s3 - r**2*s2**5 + 5*r*s0**3*s1*s4 + 5*r*s0**3*s2*s3 - 5*r*s0**2*s1**2*s3 - 5*r*s0**2*s1*s2**2 + 5*r*s0*s1**3*s2 - r*s1**5 - s0**5

# degree 6:     C5 = -6*s0
#               C4 = -6*r*s1*s5 - 6*r*s2*s4 - 3*r*s3**2 + 15*s0**2
#               C3 = -6*r**2*s2*s5**2 - 12*r**2*s3*s4*s5 - 2*r**2*s4**3 + 24*r*s0*s1*s5 + 24*r*s0*s2*s4 + 12*r*s0*s3**2 - 6*r*s1**2*s4 - 12*r*s1*s2*s3 - 2*r*s2**3 - 20*s0**3
#               C2 = -6*r**3*s3*s5**3 - 9*r**3*s4**2*s5**2 + 18*r**2*s0*s2*s5**2 + 36*r**2*s0*s3*s4*s5 + 6*r**2*s0*s4**3 + 9*r**2*s1**2*s5**2 - 18*r**2*s1*s3*s4**2 - 18*r**2*s2**2*s3*s5 + 9*r**2*s2**2*s4**2 + 3*r**2*s3**4 - 36*r*s0**2*s1*s5 - 36*r*s0**2*s2*s4 - 18*r*s0**2*s3**2 + 18*r*s0*s1**2*s4 + 36*r*s0*s1*s2*s3 + 6*r*s0*s2**3 - 6*r*s1**3*s3 - 9*r*s1**2*s2**2 + 15*s0**4
#               C1 = -6*r**4*s4*s5**4 + 12*r**3*s0*s3*s5**3 + 18*r**3*s0*s4**2*s5**2 + 12*r**3*s1*s2*s5**3 - 12*r**3*s1*s4**3*s5 - 18*r**3*s2*s3**2*s5**2 + 6*r**3*s2*s4**4 + 12*r**3*s3**3*s4*s5 - 6*r**3*s3**2*s4**3 - 18*r**2*s0**2*s2*s5**2 - 36*r**2*s0**2*s3*s4*s5 - 6*r**2*s0**2*s4**3 - 18*r**2*s0*s1**2*s5**2 + 36*r**2*s0*s1*s3*s4**2 + 36*r**2*s0*s2**2*s3*s5 - 18*r**2*s0*s2**2*s4**2 - 6*r**2*s0*s3**4 + 12*r**2*s1**3*s4*s5 - 18*r**2*s1**2*s3**2*s4 - 12*r**2*s1*s2**3*s5 + 12*r**2*s1*s2*s3**3 + 6*r**2*s2**4*s4 - 6*r**2*s2**3*s3**2 + 24*r*s0**3*s1*s5 + 24*r*s0**3*s2*s4 + 12*r*s0**3*s3**2 - 18*r*s0**2*s1**2*s4 - 36*r*s0**2*s1*s2*s3 - 6*r*s0**2*s2**3 + 12*r*s0*s1**3*s3 + 18*r*s0*s1**2*s2**2 - 6*r*s1**4*s2 - 6*s0**5
#               C0 = -r**5*s5**6 + 6*r**4*s0*s4*s5**4 + 6*r**4*s1*s3*s5**4 - 6*r**4*s1*s4**2*s5**3 + 3*r**4*s2**2*s5**4 - 12*r**4*s2*s3*s4*s5**3 + 6*r**4*s2*s4**3*s5**2 - 2*r**4*s3**3*s5**3 + 9*r**4*s3**2*s4**2*s5**2 - 6*r**4*s3*s4**4*s5 + r**4*s4**6 - 6*r**3*s0**2*s3*s5**3 - 9*r**3*s0**2*s4**2*s5**2 - 12*r**3*s0*s1*s2*s5**3 + 12*r**3*s0*s1*s4**3*s5 + 18*r**3*s0*s2*s3**2*s5**2 - 6*r**3*s0*s2*s4**4 - 12*r**3*s0*s3**3*s4*s5 + 6*r**3*s0*s3**2*s4**3 - 2*r**3*s1**3*s5**3 + 18*r**3*s1**2*s2*s4*s5**2 - 9*r**3*s1**2*s3**2*s5**2 - 3*r**3*s1**2*s4**4 - 18*r**3*s1*s2**2*s4**2*s5 + 12*r**3*s1*s2*s3*s4**3 + 6*r**3*s1*s3**4*s5 - 6*r**3*s1*s3**3*s4**2 - 3*r**3*s2**4*s5**2 + 12*r**3*s2**3*s3*s4*s5 + 2*r**3*s2**3*s4**3 - 6*r**3*s2**2*s3**3*s5 - 9*r**3*s2**2*s3**2*s4**2 + 6*r**3*s2*s3**4*s4 - r**3*s3**6 + 6*r**2*s0**3*s2*s5**2 + 12*r**2*s0**3*s3*s4*s5 + 2*r**2*s0**3*s4**3 + 9*r**2*s0**2*s1**2*s5**2 - 18*r**2*s0**2*s1*s3*s4**2 - 18*r**2*s0**2*s2**2*s3*s5 + 9*r**2*s0**2*s2**2*s4**2 + 3*r**2*s0**2*s3**4 - 12*r**2*s0*s1**3*s4*s5 + 18*r**2*s0*s1**2*s3**2*s4 + 12*r**2*s0*s1*s2**3*s5 - 12*r**2*s0*s1*s2*s3**3 - 6*r**2*s0*s2**4*s4 + 6*r**2*s0*s2**3*s3**2 + 6*r**2*s1**4*s3*s5 + 3*r**2*s1**4*s4**2 - 6*r**2*s1**3*s2**2*s5 - 12*r**2*s1**3*s2*s3*s4 - 2*r**2*s1**3*s3**3 + 6*r**2*s1**2*s2**3*s4 + 9*r**2*s1**2*s2**2*s3**2 - 6*r**2*s1*s2**4*s3 + r**2*s2**6 - 6*r*s0**4*s1*s5 - 6*r*s0**4*s2*s4 - 3*r*s0**4*s3**2 + 6*r*s0**3*s1**2*s4 + 12*r*s0**3*s1*s2*s3 + 2*r*s0**3*s2**3 - 6*r*s0**2*s1**3*s3 - 9*r*s0**2*s1**2*s2**2 + 6*r*s0*s1**4*s2 - r*s1**6 + s0**6


# 1st = pattern known = -D*s0
# 2nd = pattern known =  D**2*s0**2/2  - D*P2_0/2
# 3rd = pattern known = -D**3*s0**3/6  + 3*D**2*s0*P2_0/6   - 2*D*P3_0/6
# 4th = pattern known =  D**4*s0**4/24 - D**3*s0**2*P2_0/4  + D*D*(P2_0**2/2 + 4*P3_0*s0/3)/4 + D*(-P4_0)/4
# 5th = pattern known = -D**5*s0**5/5! + D**4*P2_0*s0**3/12 - D**3*P2_0**2*s0/8 - D**3*P3_0*s0**2/6 + D**2*P2_0*P3_0/6 + D**2*P4_0*s0/4 - D*P5_0/5
# 6th = pattern known =  D**6*s0**6/720 - D**5*P2_0*s0**4/48 + 3*D**4*P2_0**2*s0**2/48 + D**4*P3_0*s0**3/18 - D**3*P2_0**3/48 - D**3*P2_0*P3_0*s0/6 - 3*D**3*P4_0*s0**2/24 + 3*D**2*P2_0*P4_0/24 + D**2*P3_0**2/18 + D**2*P5_0*s0/5 - D*P6_0/6
# 7th = pattern known = -D**7*s0**7/5040 + D**6*P2_0*s0**5/240 - D**5*P2_0**2*s0**3/48 - D**5*P3_0*s0**4/72 + D**4*P2_0**3*s0/48 + D**4*P2_0*P3_0*s0**2/12 + D**4*P4_0*s0**3/24 - D**3*P2_0**2*P3_0/24 - D**3*P2_0*P4_0*s0/8 - D**3*P3_0**2*s0/18 - D**3*P5_0*s0**2/10 + D**2*P2_0*P5_0/10 + D**2*P3_0*P4_0/12 + D**2*P6_0*s0/6 - D*P7_0/7






s0, P2_0, P3_0, P4_0, P5_0, P6_0, P7_0, D = sympy.symbols('s0 P2_0 P3_0 P4_0 P5_0 P6_0 P7_0 D')

C6 = -D*s0
C5 =  D**2*s0**2/2  - D*P2_0/2
C4 = -D**3*s0**3/6  + 3*D**2*s0*P2_0/6   - 2*D*P3_0/6
C3 =  D**4*s0**4/24 - D**3*s0**2*P2_0/4  + D*D*(P2_0**2/2 + 4*P3_0*s0/3)/4 + D*(-P4_0)/4
C2 = -D**5*s0**5/120 + D**4*P2_0*s0**3/12 - D**3*P2_0**2*s0/8 - D**3*P3_0*s0**2/6 + D**2*P2_0*P3_0/6 + D**2*P4_0*s0/4 - D*P5_0/5
C1 =  D**6*s0**6/720 - D**5*P2_0*s0**4/48 + 3*D**4*P2_0**2*s0**2/48 + D**4*P3_0*s0**3/18 - D**3*P2_0**3/48 - D**3*P2_0*P3_0*s0/6 - 3*D**3*P4_0*s0**2/24 + 3*D**2*P2_0*P4_0/24 + D**2*P3_0**2/18 + D**2*P5_0*s0/5 - D*P6_0/6


C0 = -P7_0 - C6*P6_0 - C5*P5_0 - C4*P4_0 - C3*P3_0 - C2*P2_0 - C1*s0
print(sympy.expand(C0))





# 1st = pattern known = s0
# 2nd = pattern known = s0**2  +    P2_0
# 3rd = pattern known = s0**3  +  3*P2_0*s0     +    2*P3_0
# 4th = pattern known = s0**4  +  6*P2_0*s0**2  + (  8*P3_0*s0     +    3*P2_0**2)         +  6*P4_0
# 5th = pattern known = s0**5  + 10*P2_0*s0**3  + ( 20*P3_0*s0**2  +   15*P2_0**2*s0)     + (30*P4_0*s0     +  20*P2_0*P3_0)                            24*P5_0
# 6th = pattern known = s0**6  + 15*P2_0*s0**4  + ( 40*P3_0*s0**3  +   45*P2_0**2*s0**2)  + (90*P4_0*s0**2  + 120*P2_0*P3_0*s0    +  15*P2_0**3)    + (144*P5_0*s0    +  90*P2_0*P4_0    +  40*P3_0**2)                        + 120*P6_0
# 7th = pattern known = s0**7  + 21*P2_0*s0**5  + ( 70*P3_0*s0**4  +  105*P2_0**2*s0**3) + (210*P4_0*s0**3  + 420*P2_0*P3_0*s0**2 + 105*P2_0**3*s0) + (504*P5_0*s0**2 + 630*P2_0*P4_0*s0 + 280*P3_0**2*s0 + 210*P2_0**2*P3_0) + (840*P6_0*s0 + 504*P2_0*P5_0 + 420*P3_0*P4_0) + 720*P7_0

# Coefficient Schema

#                       1        1*2_series         2*3_series           3*4_series           6*4_series         20*5_series           15*6_series     24*5_series        90*6_series       40*6_series           ?              120*6_series         ?              ?            ?

                                # 1/2 / 0!            1/3 / 0!           1/8 / 0!              1/4 / 0!
                                # 1/2 / 1!            1/3 / 1!           1/8 / 1!              1/4 / 1!
                                # 1/2 / 2!            1/3 / 2!           1/8 / 2!              1/4 / 2!
                                # 1/2 / 3!            1/3 / 3!           1/8 / 3!              1/4 / 3!
                                # 1/2 / 4!            1/3 / 4!
                                # 1/2 / 5!
                                # etc


                                                                                        # 1 4 10 20 35 56 84
                                                                                        # 1 5 15 35 70 126 210
                                                                                        # 1 6 21 56 126 252 462