# x = s0 + s1*r**.2 + s2*r**.4 + s3*r**.6 + s4*r**.8
import sympy
import re

def categorize_extensive_term(lesser_degree: int, greater_degree: int, category_indicator: int, category_prfx: str, subject: sympy.core.add.Add, var:  sympy.core.symbol.Symbol, subject_name: str, var_name: str):
    category_indicator += 1
    modified_subject = sympy.expand(subject*(var**(-lesser_degree)))
    result = ""
    for i in range(lesser_degree, greater_degree + 1):
        category_indicator -= 1
        current = modified_subject.subs([(var, 0)])
        print(f"{category_prfx}{category_indicator} = {current}")
        modified_subject = sympy.expand((modified_subject - current)/var)

    for i in range(greater_degree - lesser_degree + 1):
        result += f"{category_prfx}{category_indicator + i}*{var_name}**{greater_degree - i} + "
    result = re.sub(" \+ $", "", result)
    result = re.sub(f"\*{var}\*\*1", f"*{var}", result)
    result = re.sub(f"\*{var}\*\*0", "", result)
    print(f"{subject_name} = {result}")

s0, s1, s2, s3, s4, r, c0, c1, c2, c3, c4, qA, qB, qC, Rad1 = sympy.symbols("s0 s1 s2 s3 s4 r c0 c1 c2 c3 c4 qA qB qC Rad1")
C4 = -5*s0
C3 = -5*r*s1*s4 -5*r*s2*s3 + 10*s0**2
C2 = -5*r**2*s2*s4**2 -5*r**2*s3**2*s4 + 15*r*s0*s1*s4 + 15*r*s0*s2*s3 -5*r*s1**2*s3 -5*r*s1*s2**2 -10*s0**3
C1 = -5*r**3*s3*s4**3 + 10*r**2*s0*s2*s4**2 + 10*r**2*s0*s3**2*s4 + 5*r**2*s1**2*s4**2 - 5*r**2*s1*s2*s3*s4 - 5*r**2*s1*s3**3 - 5*r**2*s2**3*s4 + 5*r**2*s2**2*s3**2 - 15*r*s0**2*s1*s4 - 15*r*s0**2*s2*s3 + 10*r*s0*s1**2*s3 + 10*r*s0*s1*s2**2 - 5*r*s1**3*s2 + 5*s0**4
C0 = -r**4*s4**5 + 5*r**3*s0*s3*s4**3 + 5*r**3*s1*s2*s4**3 - 5*r**3*s1*s3**2*s4**2 - 5*r**3*s2**2*s3*s4**2 + 5*r**3*s2*s3**3*s4 - r**3*s3**5 - 5*r**2*s0**2*s2*s4**2 - 5*r**2*s0**2*s3**2*s4 - 5*r**2*s0*s1**2*s4**2 + 5*r**2*s0*s1*s2*s3*s4 + 5*r**2*s0*s1*s3**3 + 5*r**2*s0*s2**3*s4 - 5*r**2*s0*s2**2*s3**2 + 5*r**2*s1**3*s3*s4 - 5*r**2*s1**2*s2**2*s4 - 5*r**2*s1**2*s2*s3**2 + 5*r**2*s1*s2**3*s3 - r**2*s2**5 + 5*r*s0**3*s1*s4 + 5*r*s0**3*s2*s3 - 5*r*s0**2*s1**2*s3 - 5*r*s0**2*s1*s2**2 + 5*r*s0*s1**3*s2 - r*s1**5 - s0**5

# replacing s1 with 1
C4 = -5*s0
C3 = -5*r*s2*s3 - 5*r*s4 + 10*s0**2
C2 = -5*r**2*s2*s4**2 - 5*r**2*s3**2*s4 + 15*r*s0*s2*s3 + 15*r*s0*s4 - 5*r*s2**2 - 5*r*s3 - 10*s0**3
C1 = -5*r**3*s3*s4**3 + 10*r**2*s0*s2*s4**2 + 10*r**2*s0*s3**2*s4 - 5*r**2*s2**3*s4 + 5*r**2*s2**2*s3**2 - 5*r**2*s2*s3*s4 - 5*r**2*s3**3 + 5*r**2*s4**2 - 15*r*s0**2*s2*s3 - 15*r*s0**2*s4 + 10*r*s0*s2**2 + 10*r*s0*s3 - 5*r*s2 + 5*s0**4
C0 = -r**4*s4**5 + 5*r**3*s0*s3*s4**3 - 5*r**3*s2**2*s3*s4**2 + 5*r**3*s2*s3**3*s4 + 5*r**3*s2*s4**3 - r**3*s3**5 - 5*r**3*s3**2*s4**2 - 5*r**2*s0**2*s2*s4**2 - 5*r**2*s0**2*s3**2*s4 + 5*r**2*s0*s2**3*s4 - 5*r**2*s0*s2**2*s3**2 + 5*r**2*s0*s2*s3*s4 + 5*r**2*s0*s3**3 - 5*r**2*s0*s4**2 - r**2*s2**5 + 5*r**2*s2**3*s3 - 5*r**2*s2**2*s4 - 5*r**2*s2*s3**2 + 5*r**2*s3*s4 + 5*r*s0**3*s2*s3 + 5*r*s0**3*s4 - 5*r*s0**2*s2**2 - 5*r*s0**2*s3 + 5*r*s0*s2 - r - s0**5

S0 = -C4/5
S4 = 2*s0**2/r - s2*s3 - c3/(5*r)



# making categories of r out of C2, C1, and C0
C2 = -c3**2*s2/5 - 2*c3*r*s2**2*s3 + c3*r*s3**2 + 4*c3*s0**2*s2 - 3*c3*s0 - 5*r**2*s2**3*s3**2 + 5*r**2*s2*s3**3 + 20*r*s0**2*s2**2*s3 - 10*r*s0**2*s3**2 - 5*r*s2**2 - 5*r*s3 - 20*s0**4*s2 + 20*s0**3
C1 = c3**3*s3/25 + 3*c3**2*r*s2*s3**2/5 - 6*c3**2*s0**2*s3/5 + 2*c3**2*s0*s2/5 + c3**2/5 + 3*c3*r**2*s2**2*s3**3 - 12*c3*r*s0**2*s2*s3**2 + 4*c3*r*s0*s2**2*s3 - 2*c3*r*s0*s3**2 + c3*r*s2**3 + 3*c3*r*s2*s3 + 12*c3*s0**4*s3 - 8*c3*s0**3*s2 - c3*s0**2 + 5*r**3*s2**3*s3**4 - 30*r**2*s0**2*s2**2*s3**3 + 10*r**2*s0*s2**3*s3**2 - 10*r**2*s0*s2*s3**3 + 5*r**2*s2**4*s3 + 15*r**2*s2**2*s3**2 - 5*r**2*s3**3 + 60*r*s0**4*s2*s3**2 - 40*r*s0**3*s2**2*s3 + 20*r*s0**3*s3**2 - 10*r*s0**2*s2**3 - 30*r*s0**2*s2*s3 + 10*r*s0*s2**2 + 10*r*s0*s3 - 5*r*s2 - 40*s0**6*s3 + 40*s0**5*s2 - 5*s0**4
C0 = c3**5/(3125*r) + c3**4*s2*s3/125 - 2*c3**4*s0**2/(125*r) + 2*c3**3*r*s2**2*s3**2/25 - 8*c3**3*s0**2*s2*s3/25 - c3**3*s0*s3/25 - c3**3*s2/25 + 8*c3**3*s0**4/(25*r) + 2*c3**2*r**2*s2**3*s3**3/5 - 12*c3**2*r*s0**2*s2**2*s3**2/5 - 3*c3**2*r*s0*s2*s3**2/5 - 4*c3**2*r*s2**2*s3/5 - c3**2*r*s3**2/5 + 24*c3**2*s0**4*s2*s3/5 + 6*c3**2*s0**3*s3/5 + c3**2*s0**2*s2 - c3**2*s0/5 - 16*c3**2*s0**6/(5*r) + c3*r**3*s2**4*s3**4 - 8*c3*r**2*s0**2*s2**3*s3**3 - 3*c3*r**2*s0*s2**2*s3**3 - 5*c3*r**2*s2**3*s3**2 - 3*c3*r**2*s2*s3**3 + 24*c3*r*s0**4*s2**2*s3**2 + 12*c3*r*s0**3*s2*s3**2 + 14*c3*r*s0**2*s2**2*s3 + 5*c3*r*s0**2*s3**2 - c3*r*s0*s2**3 - 3*c3*r*s0*s2*s3 + c3*r*s2**2 - c3*r*s3 - 32*c3*s0**6*s2*s3 - 12*c3*s0**5*s3 - 8*c3*s0**4*s2 + 3*c3*s0**3 + 16*c3*s0**8/r + r**4*s2**5*s3**5 - 10*r**3*s0**2*s2**4*s3**4 - 5*r**3*s0*s2**3*s3**4 - 10*r**3*s2**4*s3**3 - 10*r**3*s2**2*s3**4 - r**3*s3**5 + 40*r**2*s0**4*s2**3*s3**3 + 30*r**2*s0**3*s2**2*s3**3 + 45*r**2*s0**2*s2**3*s3**2 + 35*r**2*s0**2*s2*s3**3 - 5*r**2*s0*s2**4*s3 - 15*r**2*s0*s2**2*s3**2 + 5*r**2*s0*s3**3 - r**2*s2**5 + 10*r**2*s2**3*s3 - 10*r**2*s2*s3**2 - 80*r*s0**6*s2**2*s3**2 - 60*r*s0**5*s2*s3**2 - 60*r*s0**4*s2**2*s3 - 30*r*s0**4*s3**2 + 10*r*s0**3*s2**3 + 30*r*s0**3*s2*s3 - 15*r*s0**2*s2**2 + 5*r*s0**2*s3 + 5*r*s0*s2 - r + 80*s0**8*s2*s3 + 40*s0**7*s3 + 20*s0**6*s2 - 11*s0**5 - 32*s0**10/r

m2 = -c3**2*s2/5 + 4*c3*s0**2*s2 - 3*c3*s0 - 20*s0**4*s2 + 20*s0**3
m1 = -2*c3*s2**2*s3 + c3*s3**2 + 20*s0**2*s2**2*s3 - 10*s0**2*s3**2 - 5*s2**2 - 5*s3
m0 = -5*s2**3*s3**2 + 5*s2*s3**3
C2 = m0*r**2 + m1*r + m2




# categorize_extensive_term(0, 2, 2, "m", C2, r, "C2", "r") produces
m2 = -c3**2*s2/5 + 4*c3*s0**2*s2 - 3*c3*s0 - 20*s0**4*s2 + 20*s0**3
m1 = -2*c3*s2**2*s3 + c3*s3**2 + 20*s0**2*s2**2*s3 - 10*s0**2*s3**2 - 5*s2**2 - 5*s3
m0 = -5*s2**3*s3**2 + 5*s2*s3**3
C2 = m0*r**2 + m1*r + m2

# categorize_extensive_term(0, 3, 6, "m", C1, r, "C1", "r") produces
m6 = c3**3*s3/25 - 6*c3**2*s0**2*s3/5 + 2*c3**2*s0*s2/5 + c3**2/5 + 12*c3*s0**4*s3 - 8*c3*s0**3*s2 - c3*s0**2 - 40*s0**6*s3 + 40*s0**5*s2 - 5*s0**4
m5 = 3*c3**2*s2*s3**2/5 - 12*c3*s0**2*s2*s3**2 + 4*c3*s0*s2**2*s3 - 2*c3*s0*s3**2 + c3*s2**3 + 3*c3*s2*s3 + 60*s0**4*s2*s3**2 - 40*s0**3*s2**2*s3 + 20*s0**3*s3**2 - 10*s0**2*s2**3 - 30*s0**2*s2*s3 + 10*s0*s2**2 + 10*s0*s3 - 5*s2
m4 = 3*c3*s2**2*s3**3 - 30*s0**2*s2**2*s3**3 + 10*s0*s2**3*s3**2 - 10*s0*s2*s3**3 + 5*s2**4*s3 + 15*s2**2*s3**2 - 5*s3**3
m3 = 5*s2**3*s3**4
C1 = m3*r**3 + m4*r**2 + m5*r + m6

# categorize_extensive_term(-1, 4, 12, "m", C0, r, "C0", "r") produces
m12 = c3**5/3125 - 2*c3**4*s0**2/125 + 8*c3**3*s0**4/25 - 16*c3**2*s0**6/5 + 16*c3*s0**8 - 32*s0**10
m11 = c3**4*s2*s3/125 - 8*c3**3*s0**2*s2*s3/25 - c3**3*s0*s3/25 - c3**3*s2/25 + 24*c3**2*s0**4*s2*s3/5 + 6*c3**2*s0**3*s3/5 + c3**2*s0**2*s2 - c3**2*s0/5 - 32*c3*s0**6*s2*s3 - 12*c3*s0**5*s3 - 8*c3*s0**4*s2 + 3*c3*s0**3 + 80*s0**8*s2*s3 + 40*s0**7*s3 + 20*s0**6*s2 - 11*s0**5
m10 = 2*c3**3*s2**2*s3**2/25 - 12*c3**2*s0**2*s2**2*s3**2/5 - 3*c3**2*s0*s2*s3**2/5 - 4*c3**2*s2**2*s3/5 - c3**2*s3**2/5 + 24*c3*s0**4*s2**2*s3**2 + 12*c3*s0**3*s2*s3**2 + 14*c3*s0**2*s2**2*s3 + 5*c3*s0**2*s3**2 - c3*s0*s2**3 - 3*c3*s0*s2*s3 + c3*s2**2 - c3*s3 - 80*s0**6*s2**2*s3**2 - 60*s0**5*s2*s3**2 - 60*s0**4*s2**2*s3 - 30*s0**4*s3**2 + 10*s0**3*s2**3 + 30*s0**3*s2*s3 - 15*s0**2*s2**2 + 5*s0**2*s3 + 5*s0*s2 - 1
m9 = 2*c3**2*s2**3*s3**3/5 - 8*c3*s0**2*s2**3*s3**3 - 3*c3*s0*s2**2*s3**3 - 5*c3*s2**3*s3**2 - 3*c3*s2*s3**3 + 40*s0**4*s2**3*s3**3 + 30*s0**3*s2**2*s3**3 + 45*s0**2*s2**3*s3**2 + 35*s0**2*s2*s3**3 - 5*s0*s2**4*s3 - 15*s0*s2**2*s3**2 + 5*s0*s3**3 - s2**5 + 10*s2**3*s3 - 10*s2*s3**2
m8 = c3*s2**4*s3**4 - 10*s0**2*s2**4*s3**4 - 5*s0*s2**3*s3**4 - 10*s2**4*s3**3 - 10*s2**2*s3**4 - s3**5
m7 = s2**5*s3**5
C0 = m7*r**4 + m8*r**3 + m9*r**2 + m10*r + m11 + m12/r



C2 = m0*r**2 + m1*r + m2
C1 = m3*r**3 + m4*r**2 + m5*r + m6
C0 = m7*r**4 + m8*r**3 + m9*r**2 + m10*r + m11 + m12/r


m13 = (m1*m1 - 4*(m2 - c2)*m0)**.5
R = (-m1 + m13)/(2*m0)


m0, m1, m2, m3, m4, m5, m6, m7,m8,m9,m10,m11,m12,m13 = sympy.symbols("m0 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13")


C1 = m13**2*(m4/(4*m0**2) - 3*m1*m3/(8*m0**3)) + m6 - m1*m5/(2*m0) + m1**2*m4/(4*m0**2)
+    m13*(m5/(2*m0) - m1*m4/(2*m0**2) + 3*m1**2*m3/(8*m0**3)) - m1**3*m3/(8*m0**3) + m13**3*m3/(8*m0**3)

C0 = -2*m1*m12/(-4*c2 + 4*m2) + m11 + m13**2*(m9/(4*m0**2) - 3*m1*m8/(8*m0**3) + 3*m1**2*m7/(8*m0**4)) - m1*m10/(2*m0) + m1**2*m9/(4*m0**2) - m1**3*m8/(8*m0**3) + m1**4*m7/(16*m0**4) + m13**4*m7/(16*m0**4)
+     m13**3*(m8/(8*m0**3) - m1*m7/(4*m0**4)) + m13*(-2*m12/(-4*c2 + 4*m2) + m10/(2*m0) - m1*m9/(2*m0**2) + 3*m1**2*m8/(8*m0**3) - m1**3*m7/(4*m0**4))


Zero1 = m13**2*(2*m0*m4 - 3*m1*m3) + 8*m0**3*m6 - 4*m0**2*m1*m5 + 2*m0*m1**2*m4 - 8*c1*m0**3 +             m13*(4*m0**2*m5 - 4*m0*m1*m4 + 3*m1**2*m3) - m1**3*m3 + m13**3*m3

Zero2 = -8*m0**4*m1*m12 + (16*m0**4*m11 + m13**2*(4*m0**2*m9 - 6*m0*m1*m8 + 6*m0*m1**2*m7) - 8*m0**3*m1*m10 + 4*m0**2*m1**2*m9 - 2*m0*m1**3*m8 + m1**4*m7 + m13**4*m7 - 16*m0**4*c0)*(m2 - c2) +             m13**3*(2*m0*m8 - 4*m1*m7)*(m2 - c2) + m13*(-8*m0**4*m12 + (8*m0**3*m10 - 8*m0**2*m1*m9 + 6*m0*m1**2*m8 - 4*m1**3*m7)*(m2 - c2))

# replacing m13**2 with what it represents

Zero1 = -8*c1*m0**3 + 8*m0**3*m6 - 4*m0**2*m1*m5 + 2*m0*m1**2*m4 - m1**3*m3 + m13**3*m3 + m13*(4*m0**2*m5 - 4*m0*m1*m4 + 3*m1**2*m3) + (2*m0*m4 - 3*m1*m3)*(-m0*(-4*c2 + 4*m2) + m1**2)

Zero2 = -8*m0**4*m1*m12 + m13*(-c2 + m2)*(2*m0*m8 - 4*m1*m7)*(-m0*(-4*c2 + 4*m2) + m1**2) + m13*(-8*m0**4*m12 + (-c2 + m2)*(8*m0**3*m10 - 8*m0**2*m1*m9 + 6*m0*m1**2*m8 - 4*m1**3*m7)) + (-c2 + m2)*(-16*c0*m0**4 + 16*m0**4*m11 - 8*m0**3*m1*m10 + 4*m0**2*m1**2*m9 - 2*m0*m1**3*m8 + m1**4*m7 + m7*(-m0*(-4*c2 + 4*m2) + m1**2)**2 + (-m0*(-4*c2 + 4*m2) + m1**2)*(4*m0**2*m9 + 6*m0*m1**2*m7 - 6*m0*m1*m8))

# expanding both of them

Zero1 = -8*c1*m0**3 + 8*c2*m0**2*m4 - 12*c2*m0*m1*m3 + 8*m0**3*m6 - 4*m0**2*m1*m5 + 4*m0**2*m13*m5 - 8*m0**2*m2*m4 + 4*m0*m1**2*m4 - 4*m0*m1*m13*m4 + 12*m0*m1*m2*m3 - 4*m1**3*m3 + 3*m1**2*m13*m3 + m13**3*m3

Zero2 = 16*c0*c2*m0**4 - 16*c0*m0**4*m2 - 16*c2**3*m0**2*m7 - 16*c2**2*m0**3*m9 - 24*c2**2*m0**2*m1**2*m7 + 24*c2**2*m0**2*m1*m8 - 8*c2**2*m0**2*m13*m8 + 48*c2**2*m0**2*m2*m7 - 8*c2**2*m0*m1**2*m7 + 16*c2**2*m0*m1*m13*m7 - 16*c2*m0**4*m11 + 8*c2*m0**3*m1*m10 - 8*c2*m0**3*m10*m13 + 32*c2*m0**3*m2*m9 + 48*c2*m0**2*m1**2*m2*m7 - 8*c2*m0**2*m1**2*m9 + 8*c2*m0**2*m1*m13*m9 - 48*c2*m0**2*m1*m2*m8 + 16*c2*m0**2*m13*m2*m8 - 48*c2*m0**2*m2**2*m7 - 6*c2*m0*m1**4*m7 + 8*c2*m0*m1**3*m8 - 8*c2*m0*m1**2*m13*m8 + 16*c2*m0*m1**2*m2*m7 - 32*c2*m0*m1*m13*m2*m7 - 2*c2*m1**4*m7 + 8*c2*m1**3*m13*m7 - 8*m0**4*m1*m12 + 16*m0**4*m11*m2 - 8*m0**4*m12*m13 - 8*m0**3*m1*m10*m2 + 8*m0**3*m10*m13*m2 - 16*m0**3*m2**2*m9 - 24*m0**2*m1**2*m2**2*m7 + 8*m0**2*m1**2*m2*m9 - 8*m0**2*m1*m13*m2*m9 + 24*m0**2*m1*m2**2*m8 - 8*m0**2*m13*m2**2*m8 + 16*m0**2*m2**3*m7 + 6*m0*m1**4*m2*m7 - 8*m0*m1**3*m2*m8 + 8*m0*m1**2*m13*m2*m8 - 8*m0*m1**2*m2**2*m7 + 16*m0*m1*m13*m2**2*m7 + 2*m1**4*m2*m7 - 8*m1**3*m13*m2*m7

# separating m13 terms from non-m13 terms

Zero1 = -8*c1*m0**3 + 8*c2*m0**2*m4 - 12*c2*m0*m1*m3 + 8*m0**3*m6 - 4*m0**2*m1*m5 - 8*m0**2*m2*m4 + 4*m0*m1**2*m4 + 12*m0*m1*m2*m3 - 4*m1**3*m3 + m13**3*m3 + m13*(4*m0**2*m5 - 4*m0*m1*m4 + 3*m1**2*m3)

Zero2 = 16*c0*c2*m0**4 - 16*c0*m0**4*m2 - 16*c2**3*m0**2*m7 - 16*c2**2*m0**3*m9 - 24*c2**2*m0**2*m1**2*m7 + 24*c2**2*m0**2*m1*m8 + 48*c2**2*m0**2*m2*m7 - 8*c2**2*m0*m1**2*m7 - 16*c2*m0**4*m11 + 8*c2*m0**3*m1*m10 + 32*c2*m0**3*m2*m9 + 48*c2*m0**2*m1**2*m2*m7 - 8*c2*m0**2*m1**2*m9 - 48*c2*m0**2*m1*m2*m8 - 48*c2*m0**2*m2**2*m7 - 6*c2*m0*m1**4*m7 + 8*c2*m0*m1**3*m8 + 16*c2*m0*m1**2*m2*m7 - 2*c2*m1**4*m7 - 8*m0**4*m1*m12 + 16*m0**4*m11*m2 - 8*m0**3*m1*m10*m2 - 16*m0**3*m2**2*m9 - 24*m0**2*m1**2*m2**2*m7 + 8*m0**2*m1**2*m2*m9 + 24*m0**2*m1*m2**2*m8 + 16*m0**2*m2**3*m7 + 6*m0*m1**4*m2*m7 - 8*m0*m1**3*m2*m8 - 8*m0*m1**2*m2**2*m7 + 2*m1**4*m2*m7 + m13*(-8*c2**2*m0**2*m8 + 16*c2**2*m0*m1*m7 - 8*c2*m0**3*m10 + 8*c2*m0**2*m1*m9 + 16*c2*m0**2*m2*m8 - 8*c2*m0*m1**2*m8 - 32*c2*m0*m1*m2*m7 + 8*c2*m1**3*m7 - 8*m0**4*m12 + 8*m0**3*m10*m2 - 8*m0**2*m1*m2*m9 - 8*m0**2*m2**2*m8 + 8*m0*m1**2*m2*m8 + 16*m0*m1*m2**2*m7 - 8*m1**3*m2*m7)

# making another expression representation

m14 = -8*c1*m0**3 + 8*c2*m0**2*m4 - 12*c2*m0*m1*m3 + 8*m0**3*m6 - 4*m0**2*m1*m5 - 8*m0**2*m2*m4 + 4*m0*m1**2*m4 + 12*m0*m1*m2*m3 - 4*m1**3*m3 + m13**3*m3 
m15 = 4*m0**2*m5 - 4*m0*m1*m4 + 3*m1**2*m3
m16 = 16*c0*c2*m0**4 - 16*c0*m0**4*m2 - 16*c2**3*m0**2*m7 - 16*c2**2*m0**3*m9 - 24*c2**2*m0**2*m1**2*m7 + 24*c2**2*m0**2*m1*m8 + 48*c2**2*m0**2*m2*m7 - 8*c2**2*m0*m1**2*m7 - 16*c2*m0**4*m11 + 8*c2*m0**3*m1*m10 + 32*c2*m0**3*m2*m9 + 48*c2*m0**2*m1**2*m2*m7 - 8*c2*m0**2*m1**2*m9 - 48*c2*m0**2*m1*m2*m8 - 48*c2*m0**2*m2**2*m7 - 6*c2*m0*m1**4*m7 + 8*c2*m0*m1**3*m8 + 16*c2*m0*m1**2*m2*m7 - 2*c2*m1**4*m7 - 8*m0**4*m1*m12 + 16*m0**4*m11*m2 - 8*m0**3*m1*m10*m2 - 16*m0**3*m2**2*m9 - 24*m0**2*m1**2*m2**2*m7 + 8*m0**2*m1**2*m2*m9 + 24*m0**2*m1*m2**2*m8 + 16*m0**2*m2**3*m7 + 6*m0*m1**4*m2*m7 - 8*m0*m1**3*m2*m8 - 8*m0*m1**2*m2**2*m7 + 2*m1**4*m2*m7 
m17 = -8*c2**2*m0**2*m8 + 16*c2**2*m0*m1*m7 - 8*c2*m0**3*m10 + 8*c2*m0**2*m1*m9 + 16*c2*m0**2*m2*m8 - 8*c2*m0*m1**2*m8 - 32*c2*m0*m1*m2*m7 + 8*c2*m1**3*m7 - 8*m0**4*m12 + 8*m0**3*m10*m2 - 8*m0**2*m1*m2*m9 - 8*m0**2*m2**2*m8 + 8*m0*m1**2*m2*m8 + 16*m0*m1*m2**2*m7 - 8*m1**3*m2*m7
Zero1 = m14 + m15*m13
Zero2 = m16 + m17*m13

m14,m15,m16,m17 = sympy.symbols("m14 m15 m16 m17")
Zero1 = m14**2 - m15**2*(m1*m1 - 4*(m2 - c2)*m0)
Zero2 = m16**2 - m17**2*(m1*m1 - 4*(m2 - c2)*m0)

Zero1 = -4*c2*m0*m15**2 + 4*m0*m15**2*m2 - m1**2*m15**2 + m14**2
Zero2 = -4*c2*m0*m17**2 + 4*m0*m17**2*m2 - m1**2*m17**2 + m16**2


# in terms of  s0, s2, s3, and the c variables
# this succession leads to the formidable definition
# m0 = -5*s2**3*s3**2 + 5*s2*s3**3
# m1 = -2*c3*s2**2*s3 + c3*s3**2 + 20*s0**2*s2**2*s3 - 10*s0**2*s3**2 - 5*s2**2 - 5*s3
# m2 = -c3**2*s2/5 + 4*c3*s0**2*s2 - 3*c3*s0 - 20*s0**4*s2 + 20*s0**3
# m3 = 5*s2**3*s3**4
# m4 = 3*c3*s2**2*s3**3 - 30*s0**2*s2**2*s3**3 + 10*s0*s2**3*s3**2 - 10*s0*s2*s3**3 + 5*s2**4*s3 + 15*s2**2*s3**2 - 5*s3**3
# m5 = 3*c3**2*s2*s3**2/5 - 12*c3*s0**2*s2*s3**2 + 4*c3*s0*s2**2*s3 - 2*c3*s0*s3**2 + c3*s2**3 + 3*c3*s2*s3 + 60*s0**4*s2*s3**2 - 40*s0**3*s2**2*s3 + 20*s0**3*s3**2 - 10*s0**2*s2**3 - 30*s0**2*s2*s3 + 10*s0*s2**2 + 10*s0*s3 - 5*s2
# m6 = c3**3*s3/25 - 6*c3**2*s0**2*s3/5 + 2*c3**2*s0*s2/5 + c3**2/5 + 12*c3*s0**4*s3 - 8*c3*s0**3*s2 - c3*s0**2 - 40*s0**6*s3 + 40*s0**5*s2 - 5*s0**4
# m7 = s2**5*s3**5
# m8 = c3*s2**4*s3**4 - 10*s0**2*s2**4*s3**4 - 5*s0*s2**3*s3**4 - 10*s2**4*s3**3 - 10*s2**2*s3**4 - s3**5
# m9 = 2*c3**2*s2**3*s3**3/5 - 8*c3*s0**2*s2**3*s3**3 - 3*c3*s0*s2**2*s3**3 - 5*c3*s2**3*s3**2 - 3*c3*s2*s3**3 + 40*s0**4*s2**3*s3**3 + 30*s0**3*s2**2*s3**3 + 45*s0**2*s2**3*s3**2 + 35*s0**2*s2*s3**3 - 5*s0*s2**4*s3 - 15*s0*s2**2*s3**2 + 5*s0*s3**3 - s2**5 + 10*s2**3*s3 - 10*s2*s3**2
# m10 = 2*c3**3*s2**2*s3**2/25 - 12*c3**2*s0**2*s2**2*s3**2/5 - 3*c3**2*s0*s2*s3**2/5 - 4*c3**2*s2**2*s3/5 - c3**2*s3**2/5 + 24*c3*s0**4*s2**2*s3**2 + 12*c3*s0**3*s2*s3**2 + 14*c3*s0**2*s2**2*s3 + 5*c3*s0**2*s3**2 - c3*s0*s2**3 - 3*c3*s0*s2*s3 + c3*s2**2 - c3*s3 - 80*s0**6*s2**2*s3**2 - 60*s0**5*s2*s3**2 - 60*s0**4*s2**2*s3 - 30*s0**4*s3**2 + 10*s0**3*s2**3 + 30*s0**3*s2*s3 - 15*s0**2*s2**2 + 5*s0**2*s3 + 5*s0*s2 - 1
# m11 = c3**4*s2*s3/125 - 8*c3**3*s0**2*s2*s3/25 - c3**3*s0*s3/25 - c3**3*s2/25 + 24*c3**2*s0**4*s2*s3/5 + 6*c3**2*s0**3*s3/5 + c3**2*s0**2*s2 - c3**2*s0/5 - 32*c3*s0**6*s2*s3 - 12*c3*s0**5*s3 - 8*c3*s0**4*s2 + 3*c3*s0**3 + 80*s0**8*s2*s3 + 40*s0**7*s3 + 20*s0**6*s2 - 11*s0**5
# m12 = c3**5/3125 - 2*c3**4*s0**2/125 + 8*c3**3*s0**4/25 - 16*c3**2*s0**6/5 + 16*c3*s0**8 - 32*s0**10
# m14 = -8*c1*m0**3 + 8*c2*m0**2*m4 - 12*c2*m0*m1*m3 + 8*m0**3*m6 - 4*m0**2*m1*m5 - 8*m0**2*m2*m4 + 4*m0*m1**2*m4 + 12*m0*m1*m2*m3 - 4*m1**3*m3 + m13**3*m3 
# m15 = 4*m0**2*m5 - 4*m0*m1*m4 + 3*m1**2*m3
# m16 = 16*c0*c2*m0**4 - 16*c0*m0**4*m2 - 16*c2**3*m0**2*m7 - 16*c2**2*m0**3*m9 - 24*c2**2*m0**2*m1**2*m7 + 24*c2**2*m0**2*m1*m8 + 48*c2**2*m0**2*m2*m7 - 8*c2**2*m0*m1**2*m7 - 16*c2*m0**4*m11 + 8*c2*m0**3*m1*m10 + 32*c2*m0**3*m2*m9 + 48*c2*m0**2*m1**2*m2*m7 - 8*c2*m0**2*m1**2*m9 - 48*c2*m0**2*m1*m2*m8 - 48*c2*m0**2*m2**2*m7 - 6*c2*m0*m1**4*m7 + 8*c2*m0*m1**3*m8 + 16*c2*m0*m1**2*m2*m7 - 2*c2*m1**4*m7 - 8*m0**4*m1*m12 + 16*m0**4*m11*m2 - 8*m0**3*m1*m10*m2 - 16*m0**3*m2**2*m9 - 24*m0**2*m1**2*m2**2*m7 + 8*m0**2*m1**2*m2*m9 + 24*m0**2*m1*m2**2*m8 + 16*m0**2*m2**3*m7 + 6*m0*m1**4*m2*m7 - 8*m0*m1**3*m2*m8 - 8*m0*m1**2*m2**2*m7 + 2*m1**4*m2*m7 
# m17 = -8*c2**2*m0**2*m8 + 16*c2**2*m0*m1*m7 - 8*c2*m0**3*m10 + 8*c2*m0**2*m1*m9 + 16*c2*m0**2*m2*m8 - 8*c2*m0*m1**2*m8 - 32*c2*m0*m1*m2*m7 + 8*c2*m1**3*m7 - 8*m0**4*m12 + 8*m0**3*m10*m2 - 8*m0**2*m1*m2*m9 - 8*m0**2*m2**2*m8 + 8*m0*m1**2*m2*m8 + 16*m0*m1*m2**2*m7 - 8*m1**3*m2*m7
# Zero1 = -4*c2*m0*m15**2 + 4*m0*m15**2*m2 - m1**2*m15**2 + m14**2
# Zero2 = -4*c2*m0*m17**2 + 4*m0*m17**2*m2 - m1**2*m17**2 + m16**2

# the resulting calculation would take too much memory so more memory substitutions are going to need to be made

m0 = sympy.symbols("m0")

m18 =  - 5*s2**2
m19 =  20*s0**2*s2**2 - 5 - 2*c3*s2**2
m20 = c3 - 10*s0**2
m18, m19, m20 = sympy.symbols("m18 m19 m20")
m1 = m18 + m19*s3 + m20*s3**2

m2 = sympy.symbols("m2")

# m3 will remain the same


m4 = 3*c3*s2**2*s3**3 - 30*s0**2*s2**2*s3**3 + 10*s0*s2**3*s3**2 - 10*s0*s2*s3**3 + 5*s2**4*s3 + 15*s2**2*s3**2 - 5*s3**3
m5 = 3*c3**2*s2*s3**2/5 - 12*c3*s0**2*s2*s3**2 + 4*c3*s0*s2**2*s3 - 2*c3*s0*s3**2 + c3*s2**3 + 3*c3*s2*s3 + 60*s0**4*s2*s3**2 - 40*s0**3*s2**2*s3 + 20*s0**3*s3**2 - 10*s0**2*s2**3 - 30*s0**2*s2*s3 + 10*s0*s2**2 + 10*s0*s3 - 5*s2
m6 = c3**3*s3/25 - 6*c3**2*s0**2*s3/5 + 2*c3**2*s0*s2/5 + c3**2/5 + 12*c3*s0**4*s3 - 8*c3*s0**3*s2 - c3*s0**2 - 40*s0**6*s3 + 40*s0**5*s2 - 5*s0**4
m7 = s2**5*s3**5
m8 = c3*s2**4*s3**4 - 10*s0**2*s2**4*s3**4 - 5*s0*s2**3*s3**4 - 10*s2**4*s3**3 - 10*s2**2*s3**4 - s3**5
m9 = 2*c3**2*s2**3*s3**3/5 - 8*c3*s0**2*s2**3*s3**3 - 3*c3*s0*s2**2*s3**3 - 5*c3*s2**3*s3**2 - 3*c3*s2*s3**3 + 40*s0**4*s2**3*s3**3 + 30*s0**3*s2**2*s3**3 + 45*s0**2*s2**3*s3**2 + 35*s0**2*s2*s3**3 - 5*s0*s2**4*s3 - 15*s0*s2**2*s3**2 + 5*s0*s3**3 - s2**5 + 10*s2**3*s3 - 10*s2*s3**2
m10 = 2*c3**3*s2**2*s3**2/25 - 12*c3**2*s0**2*s2**2*s3**2/5 - 3*c3**2*s0*s2*s3**2/5 - 4*c3**2*s2**2*s3/5 - c3**2*s3**2/5 + 24*c3*s0**4*s2**2*s3**2 + 12*c3*s0**3*s2*s3**2 + 14*c3*s0**2*s2**2*s3 + 5*c3*s0**2*s3**2 - c3*s0*s2**3 - 3*c3*s0*s2*s3 + c3*s2**2 - c3*s3 - 80*s0**6*s2**2*s3**2 - 60*s0**5*s2*s3**2 - 60*s0**4*s2**2*s3 - 30*s0**4*s3**2 + 10*s0**3*s2**3 + 30*s0**3*s2*s3 - 15*s0**2*s2**2 + 5*s0**2*s3 + 5*s0*s2 - 1
m11 = c3**4*s2*s3/125 - 8*c3**3*s0**2*s2*s3/25 - c3**3*s0*s3/25 - c3**3*s2/25 + 24*c3**2*s0**4*s2*s3/5 + 6*c3**2*s0**3*s3/5 + c3**2*s0**2*s2 - c3**2*s0/5 - 32*c3*s0**6*s2*s3 - 12*c3*s0**5*s3 - 8*c3*s0**4*s2 + 3*c3*s0**3 + 80*s0**8*s2*s3 + 40*s0**7*s3 + 20*s0**6*s2 - 11*s0**5
m12 = c3**5/3125 - 2*c3**4*s0**2/125 + 8*c3**3*s0**4/25 - 16*c3**2*s0**6/5 + 16*c3*s0**8 - 32*s0**10
m14 = -8*c1*m0**3 + 8*c2*m0**2*m4 - 12*c2*m0*m1*m3 + 8*m0**3*m6 - 4*m0**2*m1*m5 - 8*m0**2*m2*m4 + 4*m0*m1**2*m4 + 12*m0*m1*m2*m3 - 4*m1**3*m3 + m13**3*m3 
m15 = 4*m0**2*m5 - 4*m0*m1*m4 + 3*m1**2*m3
m16 = 16*c0*c2*m0**4 - 16*c0*m0**4*m2 - 16*c2**3*m0**2*m7 - 16*c2**2*m0**3*m9 - 24*c2**2*m0**2*m1**2*m7 + 24*c2**2*m0**2*m1*m8 + 48*c2**2*m0**2*m2*m7 - 8*c2**2*m0*m1**2*m7 - 16*c2*m0**4*m11 + 8*c2*m0**3*m1*m10 + 32*c2*m0**3*m2*m9 + 48*c2*m0**2*m1**2*m2*m7 - 8*c2*m0**2*m1**2*m9 - 48*c2*m0**2*m1*m2*m8 - 48*c2*m0**2*m2**2*m7 - 6*c2*m0*m1**4*m7 + 8*c2*m0*m1**3*m8 + 16*c2*m0*m1**2*m2*m7 - 2*c2*m1**4*m7 - 8*m0**4*m1*m12 + 16*m0**4*m11*m2 - 8*m0**3*m1*m10*m2 - 16*m0**3*m2**2*m9 - 24*m0**2*m1**2*m2**2*m7 + 8*m0**2*m1**2*m2*m9 + 24*m0**2*m1*m2**2*m8 + 16*m0**2*m2**3*m7 + 6*m0*m1**4*m2*m7 - 8*m0*m1**3*m2*m8 - 8*m0*m1**2*m2**2*m7 + 2*m1**4*m2*m7 
m17 = -8*c2**2*m0**2*m8 + 16*c2**2*m0*m1*m7 - 8*c2*m0**3*m10 + 8*c2*m0**2*m1*m9 + 16*c2*m0**2*m2*m8 - 8*c2*m0*m1**2*m8 - 32*c2*m0*m1*m2*m7 + 8*c2*m1**3*m7 - 8*m0**4*m12 + 8*m0**3*m10*m2 - 8*m0**2*m1*m2*m9 - 8*m0**2*m2**2*m8 + 8*m0*m1**2*m2*m8 + 16*m0*m1*m2**2*m7 - 8*m1**3*m2*m7
Zero1 = -4*c2*m0*m15**2 + 4*m0*m15**2*m2 - m1**2*m15**2 + m14**2
Zero2 = -4*c2*m0*m17**2 + 4*m0*m17**2*m2 - m1**2*m17**2 + m16**2

# # remaining variables to solve for are s2, s3